<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Ticket;
use App\Models\ParkingSession;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;

class TicketApiController extends Controller
{
    /**
     * Create a new controller instance.
     */
    public function __construct()
    {
        $this->middleware(['auth:sanctum', 'role:attendant']);
    }

    /**
     * Display a listing of auto-generated tickets.
     *
     * This endpoint returns all tickets that were auto-generated by the ParkingSessionObserver
     * when parking sessions were created. The tickets are filtered by the authenticated user's ID
     * to ensure data security and proper access control.
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        try {
            // Validate request parameters
            $validator = Validator::make($request->all(), [
                'plate_number' => 'nullable|string|max:20',
                'print_status' => 'nullable|string|in:printed,unprinted,all',
                'date_from' => 'nullable|date|before_or_equal:today',
                'date_to' => 'nullable|date|after_or_equal:date_from',
                'per_page' => 'nullable|integer|min:1|max:100',
                'sort_by' => 'nullable|string|in:created_at,ticket_number,plate_number,time_in,rate',
                'sort_order' => 'nullable|string|in:asc,desc',
                'include_session_details' => 'nullable|boolean',
                'include_location' => 'nullable|boolean',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'errors' => $validator->errors(),
                ], 422);
            }

            $user = Auth::user();
            $perPage = $request->get('per_page', 15);
            $sortBy = $request->get('sort_by', 'created_at');
            $sortOrder = $request->get('sort_order', 'desc');
            $includeSessionDetails = $request->boolean('include_session_details', true);
            $includeLocation = $request->boolean('include_location', false);

            // Start with base query - get tickets for sessions created by the authenticated user
            $query = Ticket::query()
                ->whereHas('parkingSession', function ($sessionQuery) use ($user) {
                    $sessionQuery->where('created_by', $user->id);
                })
                ->orderBy($sortBy, $sortOrder);

            // Apply filters
            $this->applyFilters($query, $request);

            // Load relationships efficiently
            $relationships = ['parkingSession.parkingRate'];

            if ($includeSessionDetails) {
                $relationships[] = 'parkingSession.creator';
            }

            $tickets = $query->with($relationships)->paginate($perPage);

            // Transform the data
            $transformedTickets = $tickets->getCollection()->map(function (Ticket $ticket) use ($includeLocation) {
                return $this->transformTicket($ticket, $includeLocation);
            });

            // Get summary statistics
            $summary = $this->getSummaryStatistics($user->id, $request);

            return response()->json([
                'status' => 'success',
                'message' => 'Tickets retrieved successfully',
                'generated_at' => now()->format('Y-m-d H:i:s'),
                'timezone' => config('app.timezone'),
                'currency' => 'PHP',
                'currency_symbol' => '₱',
                'data' => [
                    'tickets' => $transformedTickets,
                    'summary' => $summary,
                    'pagination' => [
                        'current_page' => $tickets->currentPage(),
                        'last_page' => $tickets->lastPage(),
                        'per_page' => $tickets->perPage(),
                        'total' => $tickets->total(),
                        'from' => $tickets->firstItem(),
                        'to' => $tickets->lastItem(),
                        'has_more_pages' => $tickets->hasMorePages(),
                    ],
                ],
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'An error occurred while retrieving tickets',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Apply filters to the ticket query.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param Request $request
     * @return void
     */
    private function applyFilters($query, Request $request): void
    {
        // Filter by plate number
        if ($request->filled('plate_number')) {
            $query->byPlateNumber($request->plate_number);
        }

        // Filter by print status
        if ($request->filled('print_status')) {
            switch ($request->print_status) {
                case 'printed':
                    $query->printed();
                    break;
                case 'unprinted':
                    $query->unprinted();
                    break;
                case 'all':
                default:
                    // No filter applied - show all
                    break;
            }
        }

        // Filter by date range
        if ($request->filled('date_from')) {
            $query->whereDate('created_at', '>=', $request->date_from);
        }

        if ($request->filled('date_to')) {
            $query->whereDate('created_at', '<=', $request->date_to);
        }
    }

    /**
     * Transform ticket data for API response.
     *
     * @param Ticket $ticket
     * @param bool $includeLocation
     * @return array
     */
    private function transformTicket(Ticket $ticket, bool $includeLocation = false): array
    {
        $transformed = [
            'id' => $ticket->id,
            'ticket_number' => $ticket->ticket_number,
            'plate_number' => $ticket->plate_number,
            'time_in' => $ticket->time_in ? $ticket->time_in->format('Y-m-d H:i:s') : null,
            'time_out' => $ticket->time_out ? $ticket->time_out->format('Y-m-d H:i:s') : null,
            'duration' => $ticket->duration,
            'rate' => (float) $ticket->rate,
            'formatted_rate' => '₱' . number_format($ticket->rate, 2),
            'parking_slot' => $ticket->parking_slot,
            'is_printed' => (bool) $ticket->is_printed,
            'print_status' => $ticket->is_printed ? 'printed' : 'unprinted',
            'barcode' => $ticket->barcode,
            'qr_data' => $ticket->qr_data,
            'notes' => $ticket->notes,
            'created_at' => $ticket->created_at->format('Y-m-d H:i:s'),
            'updated_at' => $ticket->updated_at->format('Y-m-d H:i:s'),
            'parking_session' => [
                'id' => $ticket->parkingSession->id,
                'status' => $ticket->parkingSession->status,
                'start_time' => $ticket->parkingSession->start_time ? $ticket->parkingSession->start_time->format('Y-m-d H:i:s') : null,
                'end_time' => $ticket->parkingSession->end_time ? $ticket->parkingSession->end_time->format('Y-m-d H:i:s') : null,
                'duration_minutes' => $ticket->parkingSession->duration_minutes,
                'formatted_duration' => $ticket->parkingSession->formatted_duration,
                'amount_paid' => (float) $ticket->parkingSession->amount_paid,
                'formatted_amount_paid' => $ticket->parkingSession->formatted_amount,
                'is_active' => $ticket->parkingSession->isActive(),
            ],
            'parking_rate' => $ticket->parkingSession->parkingRate ? [
                'id' => $ticket->parkingSession->parkingRate->id,
                'name' => $ticket->parkingSession->parkingRate->name,
                'rate_amount' => (float) $ticket->parkingSession->parkingRate->rate_amount,
                'formatted_rate_amount' => '₱' . number_format($ticket->parkingSession->parkingRate->rate_amount, 2),
                'currency' => 'PHP',
                'currency_symbol' => '₱',
                'time_unit' => $ticket->parkingSession->parkingRate->time_unit ?? 'hour',
            ] : null,
        ];

        // Include location data if requested
        if ($includeLocation && $ticket->hasLocation()) {
            $transformed['location'] = [
                'latitude' => (float) $ticket->latitude,
                'longitude' => (float) $ticket->longitude,
                'accuracy' => (float) $ticket->accuracy,
                'source' => $ticket->location_source,
                'address' => $ticket->address,
                'city' => $ticket->city,
                'state' => $ticket->state,
                'country' => $ticket->country,
                'postal_code' => $ticket->postal_code,
                'formatted_location' => $ticket->formatted_location,
                'coordinates' => $ticket->location_coordinates,
            ];
        }

        // Include session creator details if available
        if ($ticket->parkingSession->relationLoaded('creator') && $ticket->parkingSession->creator) {
            $transformed['session_creator'] = [
                'id' => $ticket->parkingSession->creator->id,
                'name' => $ticket->parkingSession->creator->name,
                'email' => $ticket->parkingSession->creator->email,
                'role' => $ticket->parkingSession->creator->roles->first()?->name ?? 'user',
            ];
        }

        return $transformed;
    }

    /**
     * Get summary statistics for tickets.
     *
     * @param int $userId
     * @param Request $request
     * @return array
     */
    private function getSummaryStatistics(int $userId, Request $request): array
    {
        $baseQuery = Ticket::query()
            ->whereHas('parkingSession', function ($sessionQuery) use ($userId) {
                $sessionQuery->where('created_by', $userId);
            });

        // Apply same filters as main query
        $this->applyFilters($baseQuery, $request);

        $totalTickets = (int) $baseQuery->count();
        $printedTickets = (int) $baseQuery->printed()->count();
        $unprintedTickets = (int) $baseQuery->unprinted()->count();

        // Today's statistics
        $todayQuery = clone $baseQuery;
        $todayTickets = (int) $todayQuery->whereDate('created_at', Carbon::today())->count();
        $todayPrinted = (int) $todayQuery->printed()->count();

        // This month's statistics
        $monthlyQuery = clone $baseQuery;
        $monthlyTickets = (int) $monthlyQuery->whereMonth('created_at', Carbon::now()->month)
            ->whereYear('created_at', Carbon::now()->year)
            ->count();

        // Total revenue from completed sessions
        $totalRevenue = (float) $baseQuery->get()
            ->sum(function ($ticket) {
                return $ticket->parkingSession->amount_paid ?? 0;
            });

        return [
            'total_tickets' => $totalTickets,
            'printed_tickets' => $printedTickets,
            'unprinted_tickets' => $unprintedTickets,
            'print_rate_percentage' => $totalTickets > 0 ? round(($printedTickets / $totalTickets) * 100, 2) : 0,
            'today' => [
                'tickets_count' => $todayTickets,
                'printed_count' => $todayPrinted,
                'unprinted_count' => $todayTickets - $todayPrinted,
            ],
            'this_month' => [
                'tickets_count' => $monthlyTickets,
            ],
            'total_revenue' => $totalRevenue,
            'formatted_total_revenue' => '₱' . number_format($totalRevenue, 2),
            'currency' => 'PHP',
            'currency_symbol' => '₱',
        ];
    }

    /**
     * Display the specified ticket.
     *
     * @param int $id
     * @return JsonResponse
     */
    public function show(int $id): JsonResponse
    {
        try {
            $user = Auth::user();

            $ticket = Ticket::with(['parkingSession.parkingRate', 'parkingSession.creator'])
                ->whereHas('parkingSession', function ($sessionQuery) use ($user) {
                    $sessionQuery->where('created_by', $user->id);
                })
                ->findOrFail($id);

            return response()->json([
                'status' => 'success',
                'message' => 'Ticket retrieved successfully',
                'generated_at' => now()->format('Y-m-d H:i:s'),
                'timezone' => config('app.timezone'),
                'currency' => 'PHP',
                'currency_symbol' => '₱',
                'data' => $this->transformTicket($ticket, true),
            ]);

        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Ticket not found',
            ], 404);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'An error occurred while retrieving the ticket',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Generate a new ticket for a parking session.
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function generate(Request $request): JsonResponse
    {
        try {
            $validator = Validator::make($request->all(), [
                'parking_session_id' => 'required|exists:parking_sessions,id',
                'parking_slot' => 'nullable|string|max:20',
                'notes' => 'nullable|string|max:500',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'errors' => $validator->errors(),
                ], 422);
            }

            $user = Auth::user();

            // Verify the parking session belongs to the authenticated user
            $parkingSession = ParkingSession::with('parkingRate')
                ->where('created_by', $user->id)
                ->findOrFail($request->parking_session_id);

            // Check if ticket already exists
            if ($parkingSession->ticket) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Ticket already exists for this parking session',
                    'ticket_id' => $parkingSession->ticket->id,
                ], 409);
            }

            // Prevent ticket creation if plate_number is missing or empty
            if (!isset($parkingSession->plate_number) || trim($parkingSession->plate_number) === '') {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Cannot generate ticket: Parking session has no valid plate number.',
                ], 422);
            }

            $ticketNumber = Ticket::generateTicketNumber($parkingSession->id, $parkingSession->plate_number);
            $currentRate = $parkingSession->parkingRate ? $parkingSession->parkingRate->rate_amount : 0;

            $ticket = Ticket::create([
                'ticket_number' => $ticketNumber,
                'parking_session_id' => $parkingSession->id,
                'plate_number' => $parkingSession->plate_number,
                'time_in' => $parkingSession->start_time,
                'rate' => $currentRate,
                'parking_slot' => $request->parking_slot,
                'notes' => $request->notes,
                'qr_data' => [],
                'barcode' => $ticketNumber,
            ]);

            // Generate QR data
            $ticket->update(['qr_data' => $ticket->generateQrData()]);

            // Load relationships for response
            $ticket->load(['parkingSession.parkingRate', 'parkingSession.creator']);

            return response()->json([
                'status' => 'success',
                'message' => 'Ticket generated successfully',
                'generated_at' => now()->format('Y-m-d H:i:s'),
                'timezone' => config('app.timezone'),
                'currency' => 'PHP',
                'currency_symbol' => '₱',
                'data' => $this->transformTicket($ticket, false),
            ]);

        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Parking session not found',
            ], 404);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'An error occurred while generating the ticket',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Mark ticket as printed.
     *
     * @param int $ticket
     * @return JsonResponse
     */
    public function markPrinted(int $ticket): JsonResponse
    {
        try {
            $user = Auth::user();

            $ticketModel = Ticket::whereHas('parkingSession', function ($sessionQuery) use ($user) {
                $sessionQuery->where('created_by', $user->id);
            })->findOrFail($ticket);

            $ticketModel->markAsPrinted();

            return response()->json([
                'status' => 'success',
                'message' => 'Ticket marked as printed successfully',
                'generated_at' => now()->format('Y-m-d H:i:s'),
                'timezone' => config('app.timezone'),
                'data' => [
                    'ticket_id' => $ticketModel->id,
                    'ticket_number' => $ticketModel->ticket_number,
                    'is_printed' => true,
                    'printed_at' => now()->format('Y-m-d H:i:s'),
                ],
            ]);

        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Ticket not found',
            ], 404);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'An error occurred while marking the ticket as printed',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }
}
