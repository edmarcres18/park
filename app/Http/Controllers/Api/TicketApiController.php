<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Ticket;
use App\Http\Resources\TicketResource;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class TicketApiController extends Controller
{
    /**
     * Create a new controller instance.
     */
    public function __construct()
    {
        $this->middleware(['auth:sanctum', 'role:attendant']);
    }

    /**
     * Display a listing of auto-generated tickets.
     *
     * This endpoint returns all tickets that were auto-generated by the ParkingSessionObserver
     * when parking sessions are created. Tickets are filtered by the authenticated user's ID
     * and can be further filtered by various parameters.
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        try {
            // Validate request parameters
            $validator = Validator::make($request->all(), [
                'plate_number' => 'nullable|string|max:20',
                'print_status' => ['nullable', Rule::in(['printed', 'unprinted'])],
                'date_from' => 'nullable|date|before_or_equal:today',
                'date_to' => 'nullable|date|after_or_equal:date_from',
                'per_page' => 'nullable|integer|min:1|max:100',
                'sort_by' => ['nullable', Rule::in(['created_at', 'ticket_number', 'plate_number', 'time_in'])],
                'sort_direction' => ['nullable', Rule::in(['asc', 'desc'])],
                'include_relationships' => 'nullable|boolean',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Validation failed',
                    'errors' => $validator->errors(),
                ], 422);
            }

            // Get authenticated user
            $user = Auth::user();
            if (!$user) {
                return response()->json([
                    'success' => false,
                    'message' => 'Unauthorized access',
                ], 401);
            }

            // Start building the query
            $query = Ticket::query();

            // Filter by authenticated user's created tickets (through parking sessions)
            $query->whereHas('parkingSession', function ($subQuery) use ($user) {
                $subQuery->where('created_by', $user->id);
            });

            // Apply filters
            $this->applyFilters($query, $request);

            // Apply sorting
            $this->applySorting($query, $request);

            // Determine if relationships should be loaded
            $includeRelationships = $request->boolean('include_relationships', true);
            if ($includeRelationships) {
                $query->with([
                    'parkingSession.creator',
                    'parkingSession.parkingRate',
                    'template'
                ]);
            }

            // Get pagination parameter
            $perPage = $request->integer('per_page', 15);
            $perPage = min(max($perPage, 1), 100); // Ensure between 1 and 100

            // Execute query with pagination
            $tickets = $query->paginate($perPage);

            // Transform to resource collection
            $ticketResources = TicketResource::collection($tickets);

            // Prepare response data
            $responseData = [
                'success' => true,
                'message' => 'Tickets retrieved successfully',
                'data' => $ticketResources,
                'meta' => [
                    'current_page' => $tickets->currentPage(),
                    'last_page' => $tickets->lastPage(),
                    'per_page' => $tickets->perPage(),
                    'total' => $tickets->total(),
                    'from' => $tickets->firstItem(),
                    'to' => $tickets->lastItem(),
                    'has_more_pages' => $tickets->hasMorePages(),
                ],
                'filters_applied' => [
                    'plate_number' => $request->plate_number,
                    'print_status' => $request->print_status,
                    'date_from' => $request->date_from,
                    'date_to' => $request->date_to,
                    'sort_by' => $request->get('sort_by', 'created_at'),
                    'sort_direction' => $request->get('sort_direction', 'desc'),
                ],
                'currency_info' => [
                    'code' => 'PHP',
                    'symbol' => 'â‚±',
                    'name' => 'Philippine Peso',
                ],
            ];

            return response()->json($responseData, 200);

        } catch (\Exception $e) {
            // Log the error for debugging
            \Log::error('TicketApiController@index error: ' . $e->getMessage(), [
                'user_id' => Auth::id(),
                'request_data' => $request->all(),
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'An error occurred while retrieving tickets',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Apply filters to the query.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param Request $request
     * @return void
     */
    private function applyFilters($query, Request $request): void
    {
        // Filter by plate number
        if ($request->filled('plate_number')) {
            $query->byPlateNumber($request->plate_number);
        }

        // Filter by print status
        if ($request->filled('print_status')) {
            if ($request->print_status === 'printed') {
                $query->printed();
            } elseif ($request->print_status === 'unprinted') {
                $query->unprinted();
            }
        }

        // Filter by date range
        if ($request->filled('date_from')) {
            $query->whereDate('created_at', '>=', $request->date_from);
        }

        if ($request->filled('date_to')) {
            $query->whereDate('created_at', '<=', $request->date_to);
        }
    }

    /**
     * Apply sorting to the query.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param Request $request
     * @return void
     */
    private function applySorting($query, Request $request): void
    {
        $sortBy = $request->get('sort_by', 'created_at');
        $sortDirection = $request->get('sort_direction', 'desc');

        // Validate sort direction
        if (!in_array($sortDirection, ['asc', 'desc'])) {
            $sortDirection = 'desc';
        }

        // Apply sorting
        switch ($sortBy) {
            case 'ticket_number':
                $query->orderBy('ticket_number', $sortDirection);
                break;
            case 'plate_number':
                $query->orderBy('plate_number', $sortDirection);
                break;
            case 'time_in':
                $query->orderBy('time_in', $sortDirection);
                break;
            case 'created_at':
            default:
                $query->orderBy('created_at', $sortDirection);
                break;
        }
    }

    /**
     * Display the specified ticket.
     *
     * @param int $id
     * @return JsonResponse
     */
    public function show(int $id): JsonResponse
    {
        try {
            $user = Auth::user();
            if (!$user) {
                return response()->json([
                    'success' => false,
                    'message' => 'Unauthorized access',
                ], 401);
            }

            // Find ticket that belongs to the authenticated user
            $ticket = Ticket::whereHas('parkingSession', function ($query) use ($user) {
                $query->where('created_by', $user->id);
            })->with([
                'parkingSession.creator',
                'parkingSession.parkingRate',
                'template'
            ])->find($id);

            if (!$ticket) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket not found',
                ], 404);
            }

            return response()->json([
                'success' => true,
                'message' => 'Ticket retrieved successfully',
                'data' => new TicketResource($ticket),
                'currency_info' => [
                    'code' => 'PHP',
                    'symbol' => 'â‚±',
                    'name' => 'Philippine Peso',
                ],
            ], 200);

        } catch (\Exception $e) {
            \Log::error('TicketApiController@show error: ' . $e->getMessage(), [
                'user_id' => Auth::id(),
                'ticket_id' => $id,
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'An error occurred while retrieving the ticket',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Generate a new ticket for a parking session.
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function generate(Request $request): JsonResponse
    {
        try {
            $validator = Validator::make($request->all(), [
                'parking_session_id' => 'required|exists:parking_sessions,id',
                'parking_slot' => 'nullable|string|max:20',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Validation failed',
                    'errors' => $validator->errors(),
                ], 422);
            }

            $user = Auth::user();
            if (!$user) {
                return response()->json([
                    'success' => false,
                    'message' => 'Unauthorized access',
                ], 401);
            }

            // Verify the parking session belongs to the authenticated user
            $parkingSession = \App\Models\ParkingSession::where('created_by', $user->id)
                ->with('parkingRate')
                ->find($request->parking_session_id);

            if (!$parkingSession) {
                return response()->json([
                    'success' => false,
                    'message' => 'Parking session not found or access denied',
                ], 404);
            }

            // Check if ticket already exists
            if ($parkingSession->ticket) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket already exists for this session',
                    'ticket_id' => $parkingSession->ticket->id
                ], 409);
            }

            $ticketNumber = Ticket::generateTicketNumber($parkingSession->id, $parkingSession->plate_number);
            $currentRate = $parkingSession->parkingRate ? $parkingSession->parkingRate->rate_amount : 0;

            $ticket = Ticket::create([
                'ticket_number' => $ticketNumber,
                'parking_session_id' => $parkingSession->id,
                'plate_number' => $parkingSession->plate_number,
                'time_in' => $parkingSession->start_time,
                'rate' => $currentRate,
                'parking_slot' => $request->parking_slot,
                'qr_data' => [],
                'barcode' => $ticketNumber,
            ]);

            // Generate QR data
            $ticket->update(['qr_data' => $ticket->generateQrData()]);

            return response()->json([
                'success' => true,
                'message' => 'Ticket generated successfully',
                'data' => new TicketResource($ticket->load(['parkingSession.creator', 'parkingSession.parkingRate'])),
                'currency_info' => [
                    'code' => 'PHP',
                    'symbol' => 'â‚±',
                    'name' => 'Philippine Peso',
                ],
            ], 201);

        } catch (\Exception $e) {
            \Log::error('TicketApiController@generate error: ' . $e->getMessage(), [
                'user_id' => Auth::id(),
                'request_data' => $request->all(),
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'An error occurred while generating the ticket',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Mark ticket as printed.
     *
     * @param int $ticket
     * @return JsonResponse
     */
    public function markPrinted(int $ticket): JsonResponse
    {
        try {
            $user = Auth::user();
            if (!$user) {
                return response()->json([
                    'success' => false,
                    'message' => 'Unauthorized access',
                ], 401);
            }

            // Find ticket that belongs to the authenticated user
            $ticketModel = Ticket::whereHas('parkingSession', function ($query) use ($user) {
                $query->where('created_by', $user->id);
            })->find($ticket);

            if (!$ticketModel) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket not found or access denied',
                ], 404);
            }

            $ticketModel->markAsPrinted();

            return response()->json([
                'success' => true,
                'message' => 'Ticket marked as printed successfully',
                'data' => new TicketResource($ticketModel),
            ], 200);

        } catch (\Exception $e) {
            \Log::error('TicketApiController@markPrinted error: ' . $e->getMessage(), [
                'user_id' => Auth::id(),
                'ticket_id' => $ticket,
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'An error occurred while marking the ticket as printed',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }

    /**
     * Get ticket statistics for the authenticated user.
     *
     * @return JsonResponse
     */
    public function statistics(): JsonResponse
    {
        try {
            $user = Auth::user();
            if (!$user) {
                return response()->json([
                    'success' => false,
                    'message' => 'Unauthorized access',
                ], 401);
            }

            // Get user's tickets through parking sessions
            $userTicketsQuery = Ticket::whereHas('parkingSession', function ($query) use ($user) {
                $query->where('created_by', $user->id);
            });

            $statistics = [
                'total_tickets' => (int) $userTicketsQuery->count(),
                'printed_tickets' => (int) $userTicketsQuery->printed()->count(),
                'unprinted_tickets' => (int) $userTicketsQuery->unprinted()->count(),
                'today_tickets' => (int) $userTicketsQuery->whereDate('created_at', today())->count(),
                'this_month_tickets' => (int) $userTicketsQuery->whereMonth('created_at', now()->month)
                    ->whereYear('created_at', now()->year)
                    ->count(),
                'this_week_tickets' => (int) $userTicketsQuery->whereBetween('created_at', [
                    now()->startOfWeek(),
                    now()->endOfWeek()
                ])->count(),
                'total_revenue' => [
                    'amount' => (float) $userTicketsQuery->sum('rate'),
                    'formatted' => 'â‚±' . number_format($userTicketsQuery->sum('rate'), 2),
                    'currency' => 'PHP',
                ],
                'average_rate' => [
                    'amount' => (float) $userTicketsQuery->avg('rate'),
                    'formatted' => 'â‚±' . number_format($userTicketsQuery->avg('rate'), 2),
                    'currency' => 'PHP',
                ],
            ];

            return response()->json([
                'success' => true,
                'message' => 'Ticket statistics retrieved successfully',
                'data' => $statistics,
                'currency_info' => [
                    'code' => 'PHP',
                    'symbol' => 'â‚±',
                    'name' => 'Philippine Peso',
                ],
            ], 200);

        } catch (\Exception $e) {
            \Log::error('TicketApiController@statistics error: ' . $e->getMessage(), [
                'user_id' => Auth::id(),
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'An error occurred while retrieving ticket statistics',
                'error' => config('app.debug') ? $e->getMessage() : 'Internal server error',
            ], 500);
        }
    }
}
